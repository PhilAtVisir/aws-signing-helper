name: "Release"

on:
  schedule:
    - cron: '0 0 1 * *'  # Runs at 00:00 on the first day of every month
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  format:
    name: "Format"
    runs-on: "ubuntu-latest"
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: nix-fmt-rfc-style
        run: |
          echo "default.nix" | nix-shell -p nixfmt-rfc-style --run 'xargs nixfmt'

      - name: nix-editorconfig
        run: |
          echo "default.nix" | nix-shell -p editorconfig-checker --run 'xargs -r editorconfig-checker -disable-indent-size'

      - name: Upload updated default.nix
        uses: actions/upload-artifact@v4
        with:
          name: formatted-default-nix
          path: default.nix

  version_check:
    needs: format
    # if: github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
    name: "Version Check"
    runs-on: "ubuntu-latest"
    outputs:
      is_new_version: ${{ steps.version_check.outputs.is_new_version }}
      latest_version: ${{ steps.latest_release.outputs.latest_version }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Get latest release
        id: latest_release
        run: |
          LATEST_VERSION=$(curl -s https://api.github.com/repos/aws/rolesanywhere-credential-helper/releases/latest | jq -r .tag_name)
          echo "latest_version=${LATEST_VERSION}" >> $GITHUB_OUTPUT
          echo "Latest version: ${LATEST_VERSION}"

      - name: Check current version
        id: version_check
        run: |
          CURRENT_VERSION=$(curl -s https://api.github.com/repos/PhilAtVisir/aws-signing-helper/releases/latest | jq -r .tag_name)
          echo "current_version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
          echo "Current version: ${CURRENT_VERSION}"
          if [ "${{ steps.latest_release.outputs.latest_version }}" != "v${CURRENT_VERSION}" ]; then
            echo "is_new_version=true" >> $GITHUB_OUTPUT
          else
            echo "is_new_version=false" >> $GITHUB_OUTPUT
          fi

  update_nix:
    needs: version_check
    if: needs.version_check.outputs.is_new_version == 'true'
    runs-on: ubuntu-latest
    outputs:
      src_hash: ${{ steps.hashes.outputs.src_hash }}
      vendor_hash: ${{ steps.hashes.outputs.vendor_hash }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Download updated default.nix
        uses: actions/download-artifact@v4
        with:
          name: formatted-default-nix
          path: .

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Calculate new hashes
        id: hashes
        env:
          VERSION: ${{ needs.version_check.outputs.latest_version }}
        run: |
          VERSION_CLEAN="${VERSION#v}"
          export VERSION
          export VERSION_CLEAN
          
          # Create a temporary file to store outputs
          TEMP_OUTPUT=$(mktemp)
          
          nix-shell -p nix-prefetch-github jq --command "
            echo \"VERSION=\$VERSION\"
            # Calculate source hash
            SRC_HASH=\$(nix-prefetch-github aws rolesanywhere-credential-helper --rev \$VERSION | jq -r .hash)
            echo \"SRC_HASH=\$SRC_HASH\" >> $TEMP_OUTPUT
            
            # Calculate vendor hash
            TEMP_NIX=\$(mktemp)
            echo '{ pkgs ? import <nixpkgs> {} }: with pkgs; buildGoModule { pname = \"aws-signing-helper\"; version = \"'\$VERSION_CLEAN'\"; src = fetchFromGitHub { owner = \"aws\"; repo = \"rolesanywhere-credential-helper\"; rev = \"'\$VERSION'\"; hash = \"'\$SRC_HASH'\"; }; vendorHash = \"\"; }' > \$TEMP_NIX
            
            BUILD_OUTPUT=\$(nix-build \$TEMP_NIX 2>&1 || true)
            if echo \"\$BUILD_OUTPUT\" | grep -q \"got:\"; then
              VENDOR_HASH=\$(echo \"\$BUILD_OUTPUT\" | grep \"got:\" | cut -d: -f2- | tr -d ' ')
              echo \"VENDOR_HASH=\$VENDOR_HASH\" >> $TEMP_OUTPUT
            else
              echo \"Failed to extract vendor hash from output:\"
              echo \"\$BUILD_OUTPUT\"
              exit 1
            fi
          "
          
          # Read values from temp file and set outputs
          source $TEMP_OUTPUT
          echo "src_hash=$SRC_HASH" >> $GITHUB_OUTPUT
          echo "vendor_hash=$VENDOR_HASH" >> $GITHUB_OUTPUT
          rm $TEMP_OUTPUT

      - name: Update default.nix
        run: |
          VERSION="${{ needs.version_check.outputs.latest_version }}"
          VERSION_CLEAN="${VERSION#v}"
          
          sed -i \
            -e "s|version = \".*\"|version = \"$VERSION_CLEAN\"|" \
            -e "s|hash = \".*\"|hash = \"${{ steps.hashes.outputs.src_hash }}\"|" \
            -e "s|vendorHash = \".*\"|vendorHash = \"${{ steps.hashes.outputs.vendor_hash }}\"|" \
            default.nix

      - name: Upload updated default.nix
        uses: actions/upload-artifact@v4
        with:
          name: hashed-default-nix
          path: default.nix

  build:
    needs: [version_check, update_nix]
    if: needs.version_check.outputs.is_new_version == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Download updated default.nix
        uses: actions/download-artifact@v4
        with:
          name: hashed-default-nix
          path: .

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Build with new version
        run: |
          set -x  # Enable debug output
          nix-build build.nix

      - name: Prepare Release Assets
        run: |
          mkdir -p release-assets
          cp -L result/bin/* release-assets/
          # Rename the binary to include architecture
          mv release-assets/aws_signing_helper release-assets/aws_signing_helper
          
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: aws_signing_helper
          path: release-assets

      - name: Create and Upload Release Asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.version_check.outputs.latest_version }}
          files: release-assets/*
          fail_on_unmatched_files: true
          generate_release_notes: true

      - name: Remove file/folders
        run: |
          rm -rf release-assets
          rm -rf result

  create_pr:
    needs: [version_check, update_nix, build]
    if: needs.version_check.outputs.is_new_version == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Update shell.nix
        run: |
          VERSION="${{ needs.version_check.outputs.latest_version }}"
          VERSION_CLEAN="${VERSION#v}"

          # Update shell.nix
          sed -i \
            -e "s|version = \".*\"|version = \"$VERSION_CLEAN\"|" \
            -e "s|v[0-9.]*/aws_signing_helper|${VERSION}/aws_signing_helper|" \
            shell.nix

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update rolesanywhere-credential-helper to ${{ needs.version_check.outputs.latest_version }}"
          title: "chore: update rolesanywhere-credential-helper to ${{ needs.version_check.outputs.latest_version }}"
          body: |
            Updates rolesanywhere-credential-helper to ${{ needs.version_check.outputs.latest_version }}
            
            Changes:
            - Version: ${{ needs.version_check.outputs.latest_version }}
            - Source hash: ${{ needs.update_nix.outputs.src_hash }}
            - Vendor hash: ${{ needs.update_nix.outputs.vendor_hash }}
            
            This PR was automatically created by the version check workflow.
          branch: "update-rolesanywhere-helper"
          delete-branch: true
          base: "main"
          labels: "dependencies,automated pr"
          draft: false
